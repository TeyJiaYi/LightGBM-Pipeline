stages:
  # 1) Create stable test set from original data
  split_test:
    cmd: python src/split_test.py config/split_test_config.yaml
    deps:
      - src/split_test.py
      - config/split_test_config.yaml
      - data/raw/original/       # The folder with original CSV(s) 
    outs:
      - data/processed/train_loan.csv
      - data/test/test_loan.csv

  preprocess:
    cmd: python src/preprocess.py config/preprocess_config.yaml
    deps:
      - src/preprocess.py
      - config/preprocess_config.yaml
      - data/raw/new/
      - data/processed/train_loan.csv
    outs:
      - data/processed/loan_clean_latest.csv

  train:
    cmd: python src/train_model.py config/train_config.yaml
    deps:
      - src/train_model.py
      - config/train_config.yaml
      - data/processed/loan_clean_latest.csv
    outs:
      - output/models/

  # 4) Evaluate stage (final hold-out check):
  evaluate:
    cmd: python src/evaluate.py config/eval_config.yaml
    deps:
      - src/evaluate.py
      - config/eval_config.yaml
      - output/models/
      - data/test/test_loan.csv  # stable final test
    outs:
      - reports/
  
  bento_build:
    cmd: python src/bento_build.py
    deps:
      - src/bento_build.py
      - loanriskservice.py
      - bentofile.yaml
      
  seldon_deploy:
    cmd: python src/deploy.py
    deps:
      - k8s/seldon_deployment.yaml
      - model_version.txt
      - src/deploy.py
    